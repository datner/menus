/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../schema/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Locales: "en" | "he"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Cateogry: { // root type
    id: number; // Int!
  }
  Item: { // root type
    id: number; // Int!
    image: string; // String!
    price: number; // Int!
  }
  ItemI18L: { // root type
    id: number; // Int!
    locale: NexusGenEnums['Locales']; // Locales!
    name: string; // String!
  }
  Menu: { // root type
    id: number; // Int!
  }
  Query: {};
  Restaurant: { // root type
    id: number; // Int!
    logo: string; // String!
    slug: string; // String!
  }
  RestaurantI18L: { // root type
    id: number; // Int!
    locale: NexusGenEnums['Locales']; // Locales!
    name: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Cateogry: { // field return type
    id: number; // Int!
    items: NexusGenRootTypes['Item'][]; // [Item!]!
    menu: NexusGenRootTypes['Menu']; // Menu!
  }
  Item: { // field return type
    category: NexusGenRootTypes['Cateogry']; // Cateogry!
    content: NexusGenRootTypes['ItemI18L'][]; // [ItemI18L!]!
    id: number; // Int!
    image: string; // String!
    price: number; // Int!
  }
  ItemI18L: { // field return type
    id: number; // Int!
    item: NexusGenRootTypes['Item']; // Item!
    locale: NexusGenEnums['Locales']; // Locales!
    name: string; // String!
  }
  Menu: { // field return type
    categories: NexusGenRootTypes['Cateogry'][]; // [Cateogry!]!
    id: number; // Int!
    restaurant: NexusGenRootTypes['Restaurant']; // Restaurant!
  }
  Query: { // field return type
    restaurant: NexusGenRootTypes['Restaurant'] | null; // Restaurant
    restaurantBySlug: NexusGenRootTypes['Restaurant'] | null; // Restaurant
    restaurants: Array<NexusGenRootTypes['Restaurant'] | null> | null; // [Restaurant]
  }
  Restaurant: { // field return type
    content: NexusGenRootTypes['RestaurantI18L'][]; // [RestaurantI18L!]!
    id: number; // Int!
    logo: string; // String!
    menu: NexusGenRootTypes['Menu'] | null; // Menu
    slug: string; // String!
  }
  RestaurantI18L: { // field return type
    id: number; // Int!
    locale: NexusGenEnums['Locales']; // Locales!
    name: string; // String!
    restaurant: NexusGenRootTypes['Restaurant']; // Restaurant!
  }
}

export interface NexusGenFieldTypeNames {
  Cateogry: { // field return type name
    id: 'Int'
    items: 'Item'
    menu: 'Menu'
  }
  Item: { // field return type name
    category: 'Cateogry'
    content: 'ItemI18L'
    id: 'Int'
    image: 'String'
    price: 'Int'
  }
  ItemI18L: { // field return type name
    id: 'Int'
    item: 'Item'
    locale: 'Locales'
    name: 'String'
  }
  Menu: { // field return type name
    categories: 'Cateogry'
    id: 'Int'
    restaurant: 'Restaurant'
  }
  Query: { // field return type name
    restaurant: 'Restaurant'
    restaurantBySlug: 'Restaurant'
    restaurants: 'Restaurant'
  }
  Restaurant: { // field return type name
    content: 'RestaurantI18L'
    id: 'Int'
    logo: 'String'
    menu: 'Menu'
    slug: 'String'
  }
  RestaurantI18L: { // field return type name
    id: 'Int'
    locale: 'Locales'
    name: 'String'
    restaurant: 'Restaurant'
  }
}

export interface NexusGenArgTypes {
  Query: {
    restaurant: { // args
      id: number; // Int!
    }
    restaurantBySlug: { // args
      slug: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}